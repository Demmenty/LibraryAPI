"""initial

Revision ID: f9481746a598
Revises: 
Create Date: 2024-01-28 14:16:36.476886

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "f9481746a598"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "author",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("author_pkey")),
    )
    op.create_index(op.f("author_id_idx"), "author", ["id"], unique=False)
    op.create_index(op.f("author_name_idx"), "author", ["name"], unique=False)
    op.create_table(
        "book",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("title", sa.String(), nullable=True),
        sa.Column("language", sa.String(), nullable=True),
        sa.Column("publication_date", sa.String(), nullable=True),
        sa.Column("isbn", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("book_pkey")),
    )
    op.create_index(op.f("book_id_idx"), "book", ["id"], unique=False)
    op.create_index(op.f("book_isbn_idx"), "book", ["isbn"], unique=False)
    op.create_index(op.f("book_language_idx"), "book", ["language"], unique=False)
    op.create_index(
        op.f("book_publication_date_idx"), "book", ["publication_date"], unique=False
    )
    op.create_index(op.f("book_title_idx"), "book", ["title"], unique=False)
    op.create_table(
        "category",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("category_pkey")),
    )
    op.create_index(op.f("category_id_idx"), "category", ["id"], unique=False)
    op.create_index(op.f("category_name_idx"), "category", ["name"], unique=False)
    op.create_table(
        "library_member",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("contact_information", sa.String(), nullable=True),
        sa.Column(
            "membership_status",
            sa.Enum("ACTIVE", "BLOCKED", name="membershipstatus"),
            nullable=True,
        ),
        sa.Column("membership_period", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id", name=op.f("library_member_pkey")),
    )
    op.create_index(
        op.f("library_member_id_idx"), "library_member", ["id"], unique=False
    )
    op.create_table(
        "book_author",
        sa.Column("book_id", sa.Integer(), nullable=True),
        sa.Column("author_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["author_id"], ["author.id"], name=op.f("book_author_author_id_fkey")
        ),
        sa.ForeignKeyConstraint(
            ["book_id"], ["book.id"], name=op.f("book_author_book_id_fkey")
        ),
    )
    op.create_table(
        "book_category",
        sa.Column("book_id", sa.Integer(), nullable=True),
        sa.Column("category_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["book_id"], ["book.id"], name=op.f("book_category_book_id_fkey")
        ),
        sa.ForeignKeyConstraint(
            ["category_id"],
            ["category.id"],
            name=op.f("book_category_category_id_fkey"),
        ),
    )
    op.create_table(
        "user",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("username", sa.String(), nullable=True),
        sa.Column("email", sa.String(), nullable=True),
        sa.Column("password", sa.LargeBinary(), nullable=True),
        sa.Column("role", sa.Enum("ADMIN", "USER", name="userrole"), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("library_member_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["library_member_id"],
            ["library_member.id"],
            name=op.f("user_library_member_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("user_pkey")),
    )
    op.create_index(op.f("user_email_idx"), "user", ["email"], unique=True)
    op.create_index(op.f("user_id_idx"), "user", ["id"], unique=False)
    op.create_index(op.f("user_username_idx"), "user", ["username"], unique=True)
    op.create_table(
        "refresh_token",
        sa.Column("uuid", postgresql.UUID(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column("refresh_token", sa.String(), nullable=True),
        sa.Column("expires_at", sa.DateTime(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
            name=op.f("refresh_token_user_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("uuid", name=op.f("refresh_token_pkey")),
    )
    op.create_index(
        op.f("refresh_token_uuid_idx"), "refresh_token", ["uuid"], unique=False
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("refresh_token_uuid_idx"), table_name="refresh_token")
    op.drop_table("refresh_token")
    op.drop_index(op.f("user_username_idx"), table_name="user")
    op.drop_index(op.f("user_id_idx"), table_name="user")
    op.drop_index(op.f("user_email_idx"), table_name="user")
    op.drop_table("user")
    op.drop_table("book_category")
    op.drop_table("book_author")
    op.drop_index(op.f("library_member_id_idx"), table_name="library_member")
    op.drop_table("library_member")
    op.drop_index(op.f("category_name_idx"), table_name="category")
    op.drop_index(op.f("category_id_idx"), table_name="category")
    op.drop_table("category")
    op.drop_index(op.f("book_title_idx"), table_name="book")
    op.drop_index(op.f("book_publication_date_idx"), table_name="book")
    op.drop_index(op.f("book_language_idx"), table_name="book")
    op.drop_index(op.f("book_isbn_idx"), table_name="book")
    op.drop_index(op.f("book_id_idx"), table_name="book")
    op.drop_table("book")
    op.drop_index(op.f("author_name_idx"), table_name="author")
    op.drop_index(op.f("author_id_idx"), table_name="author")
    op.drop_table("author")
    # ### end Alembic commands ###
